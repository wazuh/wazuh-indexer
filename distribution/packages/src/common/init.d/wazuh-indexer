#!/bin/bash
#
# wazuh-indexer <summary>
#
# chkconfig:   2345 80 20
# description: Starts and stops a single wazuh-indexer instance on this system
#

### BEGIN INIT INFO
# Provides: Wazuh-indexer
# Required-Start: $network $named
# Required-Stop: $network $named
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: This service manages the wazuh-indexer daemon
# Description: Wazuh-indexer is a very scalable, schema-free and high-performance search solution supporting multi-tenancy and near realtime search.
### END INIT INFO

set -e -o pipefail

PATH=/bin:/usr/bin:/sbin:/usr/sbin
NAME=wazuh-indexer
DEFAULT=/etc/default/$NAME

#
# init.d / servicectl compatibility (openSUSE)
#
if [ -f /etc/rc.status ]; then
    # shellcheck disable=SC1091
    . /etc/rc.status
    rc_reset
fi

#
# Source function library.
#
if [ -f /etc/rc.d/init.d/functions ]; then
    # shellcheck disable=SC1091
    . /etc/rc.d/init.d/functions
fi

# overwrite settings from default file
if [ -f "$DEFAULT" ]; then
    # shellcheck disable=SC1090
    . "$DEFAULT"
fi

# Sets the default values for wazuh-indexer variables used in this script
OPENSEARCH_HOME="/usr/share/$NAME"
MAX_OPEN_FILES=65535
MAX_MAP_COUNT=262144
OPENSEARCH_PATH_CONF="/etc/$NAME"

PID_DIR="/run/$NAME"

# Source the default env file
WI_ENV_FILE="/etc/sysconfig/$NAME"
if [ -f "$WI_ENV_FILE" ]; then
    # shellcheck source=/dev/null
    . "$WI_ENV_FILE"
fi

exec="$OPENSEARCH_HOME/bin/opensearch"
prog="$NAME"
pidfile="$PID_DIR/${prog}.pid"

export WI_JAVA_OPTS
export JAVA_HOME
export OPENSEARCH_PATH_CONF
export WI_STARTUP_SLEEP_TIME

lockfile=/var/lock/subsys/$prog

if [ ! -x "$exec" ]; then
    echo "The wazuh-indexer startup script does not exist or it is not executable, tried: $exec"
    exit 1
fi

start() {
    [ -x $exec ] || exit 5

    if [ -n "$MAX_OPEN_FILES" ]; then
        ulimit -n $MAX_OPEN_FILES
    fi
    if [ -n "$MAX_LOCKED_MEMORY" ]; then
        ulimit -l "$MAX_LOCKED_MEMORY"
    fi
    if [ -n "$MAX_MAP_COUNT" ] && [ -f /proc/sys/vm/max_map_count ] && [ "$MAX_MAP_COUNT" -gt "$(cat /proc/sys/vm/max_map_count)" ]; then
        sysctl -q -w vm.max_map_count=$MAX_MAP_COUNT
    fi

    # Ensure that the PID_DIR exists (it is cleaned at OS startup time)
    if [ -n "$PID_DIR" ] && [ ! -e "$PID_DIR" ]; then
        mkdir -p "$PID_DIR" && chown wazuh-indexer:wazuh-indexer "$PID_DIR"
    fi
    if [ -n "$pidfile" ] && [ ! -e "$pidfile" ]; then
        touch "$pidfile" && chown wazuh-indexer:wazuh-indexer "$pidfile"
    fi
    # Ensure that the lockfile directory exists
    if [ ! -d "/var/lock/subsys/" ]; then
        mkdir -p "/var/lock/subsys/"
    fi

    cd $OPENSEARCH_HOME || exit
    echo -n $"Starting $prog..."
    # if not running, start it up here, usually something like "daemon $exec"
    if command -v daemon > /dev/null 2>&1; then
        nohup daemon --user wazuh-indexer --pidfile $pidfile $exec -d > /dev/null 2>&1
    else
        nohup runuser wazuh-indexer --shell="/bin/bash" --command="$exec -p $pidfile -d" > /dev/null 2>&1
    fi
    retval=$?
    echo
    if [ $retval -eq 0 ]; then
        if [ ! -f $lockfile ]; then
            touch $lockfile > /dev/null 2>&1
        fi
        echo "$prog started successfully"
    else
        echo "Failed to start $prog"
    fi
    return $retval
}

stop() {
    echo -n $"Stopping $prog... "
    echo
    if [ -f "$pidfile" ]; then
        pid=$(cat "$pidfile")
        if kill -0 "$pid" > /dev/null 2>&1; then
            kill "$pid"
            retval=$?
            if [ $retval -eq 0 ]; then
                rm -f $lockfile
                echo "$prog stopped successfully"
            else
                echo "Failed to stop $prog"
            fi
            return $retval
        else
            echo "$prog is not running"
            rm -f "$pidfile"
        fi
    else
        echo "$prog is not running"
    fi
    return 0
}

restart() {
    stop
    sleep 2  # Adding a short delay
    start
}

reload() {
    restart
}

status() {
    if [ -f "$pidfile" ]; then
        pid=$(cat "$pidfile")
        if [ -d "/proc/$pid" ]; then
            echo "$prog is running (PID: $pid)"
            return 0
        else
            echo "$prog is not running, but pidfile exists"
            return 1
        fi
    else
        echo "$prog is not running"
        return 3
    fi
}

force_reload() {
    restart
}

rh_status() {
    status
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}

case "$1" in
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart)
        $1
        ;;
    reload)
        rh_status_q || exit 7
        $1
        ;;
    force-reload)
        force_reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
        restart
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload}"
        exit 2
esac
exit $?
