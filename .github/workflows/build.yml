name: Build packages (on demand)

# This workflow runs when any of the following occur:
# - Run manually
on:
  workflow_dispatch:
    inputs:
      revision:
        description: "Revision"
        type: string
        default: "0"
      upload:
        description: "Upload ?"
        type: boolean
        default: false
      is_release:
        description: "Is release ?"
        type: boolean
        default: false
      distribution:
        description: '[ "tar", "rpm", "deb", "docker" ]'
        type: string
        default: '[ "rpm", "deb" ]'
      architecture:
        description: '[ "x64", "arm64" ]'
        type: string
        default: '[ "x64" ]'
  workflow_call:
    inputs:
      revision:
        description: "Revision"
        type: string
        default: "0"
      upload:
        description: "Upload ?"
        type: boolean
        default: false
      is_release:
        description: "Is release ?"
        type: boolean
        default: false
      distribution:
        description: '[ "tar", "rpm", "deb", "docker" ]'
        type: string
        default: '[ "rpm", "deb" ]'
      architecture:
        description: '[ "x64", "arm64" ]'
        type: string
        default: '[ "x64" ]'

# ==========================
# Bibliography
# ==========================
#
# * Reusable workflows: limitations
#   | https://docs.github.com/en/actions/using-workflows/reusing-workflows#limitations
# * Using matrix in reusable workflows:
#   | https://docs.github.com/en/actions/using-workflows/reusing-workflows#using-a-matrix-strategy-with-a-reusable-workflow
# * Reading input from the called workflow
#   | https://docs.github.com/en/enterprise-cloud@latest/actions/using-workflows/workflow-syntax-for-github-actions#onworkflow_callinputs
# * Ternary operator
#   | https://docs.github.com/en/actions/learn-github-actions/expressions#example

jobs:
  matrix:
    name: Set matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.setup.outputs.matrix }}
    steps:
      - id: setup
        run: |
          matrix=$(jq -cn \
              --argjson distribution '${{ inputs.distribution }}' \
              --argjson architecture '${{ inputs.architecture }}' \
              '{distribution: $distribution, architecture: $architecture}'
          )
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  build:
    name: Run build pipeline
    needs: [matrix]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix.outputs.matrix) }}
    steps:
      - uses: ./.github/workflows/r_build.yml
        with:
          revision: ${{ github.event_name == 'push' && '0' || inputs.revision }}
          upload: ${{ inputs.upload }}
          is_release: ${{ inputs.is_release }}
          distribution: ${{ matrix.distribution }}
          architecture: ${{ matrix.architecture }}
