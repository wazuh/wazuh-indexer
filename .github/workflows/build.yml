run-name: Build ${{ inputs.distribution }} Wazuh Indexer on ${{ inputs.architecture }} | ${{ inputs.id }}
name: Build packages (on demand)

# This workflow runs when any of the following occur:
# - Run manually
# - Invoked from another workflow
on:
  workflow_dispatch:
    inputs:
      revision:
        description: "Revision"
        type: string
        default: "0"
      upload:
        description: "Upload ?"
        type: boolean
        default: false
      is_stage:
        description: "Is stage ?"
        type: boolean
        default: false
      distribution:
        description: '[ "tar", "rpm", "deb" ]'
        type: string
        default: '[ "rpm", "deb" ]'
      architecture:
        description: '[ "x64", "arm64" ]'
        type: string
        default: '[ "x64", "arm64"  ]'
      checksum:
        description: "Checksum ?"
        type: boolean
        default: false
      id:
        description: "ID used to identify the workflow uniquely."
        type: string
        required: false
      previous_version:
        description: "Previous version of the package."
        type: string
        default: "4.11.1"
  workflow_call:
    inputs:
      revision:
        description: "Revision"
        type: string
        default: "0"
      upload:
        description: "Upload ?"
        type: boolean
        default: false
      is_stage:
        description: "Is stage ?"
        type: boolean
        default: false
      distribution:
        description: '[ "tar", "rpm", "deb" ]'
        type: string
        default: '[ "rpm", "deb" ]'
      architecture:
        description: '[ "x64", "arm64" ]'
        type: string
        default: '[ "x64", "arm64"  ]'
      checksum:
        description: "Checksum ?"
        type: boolean
        default: false
      id:
        type: string
        required: false
      previous_version:
        description: "Previous version of the package."
        type: string
        default: "4.11.1"
    secrets:
      CI_INTERNAL_DEVELOPMENT_BUCKET_USER_ACCESS_KEY:
        required: true
        description: "AWS user access key"
      CI_INTERNAL_DEVELOPMENT_BUCKET_USER_SECRET_KEY:
        required: true
        description: "AWS user secret key"
      AWS_IAM_OVA_ROLE:
        required: true
        description: "AWS IAM role"
  
permissions:
      id-token: write 
      contents: read
# ==========================
# Bibliography
# ==========================
#
# * Reusable workflows: limitations
#   | https://docs.github.com/en/actions/using-workflows/reusing-workflows#limitations
# * Using matrix in reusable workflows:
#   | https://docs.github.com/en/actions/using-workflows/reusing-workflows#using-a-matrix-strategy-with-a-reusable-workflow
# * Reading input from the called workflow
#   | https://docs.github.com/en/enterprise-cloud@latest/actions/using-workflows/workflow-syntax-for-github-actions#onworkflow_callinputs
# * Ternary operator
#   | https://docs.github.com/en/actions/learn-github-actions/expressions#example

jobs:
  matrix:
    name: Set up matrix
    runs-on: ubuntu-24.04
    outputs:
      matrix: ${{ steps.setup.outputs.matrix }}
    steps:
      - id: setup
        run: |
          matrix=$(jq -cn \
              --argjson distribution '${{ inputs.distribution }}' \
              --argjson architecture '${{ inputs.architecture }}' \
              '{distribution: $distribution, architecture: $architecture}'
          )
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  build:
    needs: [matrix]
    runs-on: ${{ matrix.architecture == 'arm64' && 'wz-linux-arm64' || 'ubuntu-24.04' }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Provision
        if: ${{ matrix.distribution == 'deb' }}
        run: |
          sudo bash packaging_scripts/provision.sh

      - name: Run `baptizer.sh` (min)
        run: |
          name=$(bash packaging_scripts/baptizer.sh -m \
            -a ${{ matrix.architecture }} \
            -d ${{ matrix.distribution }}  \
            -r ${{ inputs.revision }} \
            ${{ inputs.is_stage && '-x' || '' }} \
          )
          echo "name=$name" >> $GITHUB_OUTPUT
        id: min_package

      - name: Run `baptizer.sh`
        run: |
          name=$(bash packaging_scripts/baptizer.sh \
            -a ${{ matrix.architecture }} \
            -d ${{ matrix.distribution }}  \
            -r ${{ inputs.revision }} \
            ${{ inputs.is_stage && '-x' || '' }} \
          )
          echo "name=$name" >> $GITHUB_OUTPUT
        id: package

      - name: Run `build.sh`
        run: |
          bash packaging_scripts/build.sh \
            -a ${{ matrix.architecture }} \
            -d ${{ matrix.distribution }} \
            -n ${{ steps.min_package.outputs.name }}

      - name: Run `assemble.sh`
        run: |
          bash packaging_scripts/assemble.sh \
            -a ${{ matrix.architecture }} \
            -d ${{ matrix.distribution }} \
            -r ${{ inputs.revision }}
      

      - name: Clone Wazuh Automation repository and install dependencies
        if: ${{ matrix.distribution == 'rpm' }}
        env:
          username: "wazuh-devel-xdrsiem-indexer"
        run: |
          git clone https://${{ env.username }}:${{ secrets.INDEXER_BOT_TOKEN }}@github.com/wazuh/wazuh-automation.git
          cd wazuh-automation
          sudo pip3 install -r deployability/deps/requirements.txt
      
      - name: Configure AWS credentials
        if: ${{ matrix.distribution == 'rpm' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: "us-east-1"
          role-to-assume: ${{ secrets.AWS_IAM_OVA_ROLE }}
          role-session-name: "OVA-Builder"
         

      - name: Setup RPM environment
        if: ${{ matrix.distribution == 'rpm' }}
        run: |
          sudo bash packaging_scripts/rpm_setup_enviroment.sh ${{ matrix.architecture }}
          ansible_host=$(grep 'ansible_host:' /tmp/inventory.yaml | sed 's/.*: *//') && echo "ansible_host=$ansible_host" >> $GITHUB_ENV 
          ansible_port=$(grep 'ansible_port:' /tmp/inventory.yaml | sed 's/.*: *//') && echo "ansible_port=$ansible_port" >> $GITHUB_ENV 
          ansible_user=$(grep 'ansible_user:' /tmp/inventory.yaml | sed 's/.*: *//') && echo "ansible_user=$ansible_user" >> $GITHUB_ENV 
          ansible_ssh_private_key_file=$(grep 'ansible_ssh_private_key_file:' /tmp/inventory.yaml | sed 's/.*: *//') && echo "ansible_ssh_private_key_file=$ansible_ssh_private_key_file" >> $GITHUB_ENV
          ansible_ssh_common_args=$(grep 'ansible_ssh_common_args:' /tmp/allocatorvm/inventory.yml | sed 's/.*: *//') && echo "ansible_ssh_common_args=$ansible_ssh_common_args" >> $GITHUB_ENV

      - name: Set up SSH and SCP command
        if: ${{ matrix.distribution == 'rpm' }}
        run: |
          echo "SSH_COMMAND=ssh -i ${{ env.ansible_ssh_private_key_file }} -p ${{ env.ansible_port }} ${{ env.ansible_ssh_common_args }} ${{ env.ansible_user }}@${{ env.ansible_host }}" >> $GITHUB_ENV
          echo "SCP_COMMAND=scp -i ${{ env.ansible_ssh_private_key_file }} -P ${{ env.ansible_port }} ${{ env.ansible_ssh_common_args }}" >> $GITHUB_ENV
      
      - name: Test RPM package installation
        if: ${{ matrix.distribution == 'rpm' }}
        run: |
          ${{ env.SSH_COMMAND }} 'echo "hello"'
          ${{ env.SCP_COMMAND }} artifacts/dist/${{ steps.package.outputs.name }} ${{ env.ansible_user }}@${{ env.ansible_host }}:/home/${{ env.ansible_user }}/
          ${{ env.SSH_COMMAND }} 'sudo yum localinstall -y /home/${{ env.ansible_user }}/${{ steps.package.outputs.name }}'
        
      - name: Test RPM package uninstallation
        if: ${{ matrix.distribution == 'rpm' }}
        run: |
           ${{ env.SSH_COMMAND }} 'yum remove wazuh-indexer -y'
          
      - name: Test RPM package update stopping the indexer
        if: ${{ matrix.distribution == 'rpm' && (matrix.architecture == 'x64' ||  (inputs.previous_version  >= '4.12' && matrix.architecture  == 'arm64'))}}
        run: |
          ${{ env.SCP_COMMAND }} artifacts/dist/${{ steps.package.outputs.name }} ${{ env.ansible_user }}@${{ env.ansible_host }}:/home/${{ env.ansible_user }}/
          ${{ env.SCP_COMMAND }} packaging_scripts/indexer_node_install.sh ${{ env.ansible_user }}@${{ env.ansible_host }}:/home/${{ env.ansible_user }}/
          ${{ env.SSH_COMMAND }} << EOF
          bash /home/${{ env.ansible_user }}/indexer_node_install.sh ${{ inputs.previous_version }}
          systemctl stop wazuh-indexer
          yum localinstall "/home/${{ env.ansible_user }}/${{ steps.package.outputs.name }}" -y
          yum remove wazuh-indexer -y
          EOF
    
      - name: Test RPM package update without stopping the indexer
        if: ${{ matrix.distribution == 'rpm' && (matrix.architecture == 'x64' ||  (inputs.previous_version  >= '4.12' && matrix.architecture  == 'arm64'))}}
        run: |
          ${{ env.SCP_COMMAND }} artifacts/dist/${{ steps.package.outputs.name }} ${{ env.ansible_user }}@${{ env.ansible_host }}:/home/${{ env.ansible_user }}/
          ${{ env.SCP_COMMAND }} packaging_scripts/indexer_node_install.sh ${{ env.ansible_user }}@${{ env.ansible_host }}:/home/${{ env.ansible_user }}/
          ${{ env.SSH_COMMAND }} << EOF
          bash /home/${{ env.ansible_user }}/indexer_node_install.sh ${{ inputs.previous_version }}
          yum localinstall "/home/${{ env.ansible_user }}/${{ steps.package.outputs.name }}" -y
          EOF

      - name: Destroy Allocator Machine
        if: ${{ matrix.distribution == 'rpm' }}
        run: |
          cd wazuh-automation/deployability
          python3 modules/allocation/main.py --action delete --track-output "/tmp/track.yaml"


      - name: Test DEB package installation
        if: ${{ matrix.distribution == 'deb' }}
        run: |
          sudo dpkg -i "artifacts/dist/${{ steps.package.outputs.name }}"
          sudo apt-get remove --purge wazuh-indexer -y 
          sudo rm -r /var/lib/wazuh-indexer/
      
      - name: Test DEB package update stopping the indexer
        if: ${{ matrix.distribution == 'deb' && (matrix.architecture == 'x64' || (inputs.previous_version  >= '4.12' && matrix.architecture  == 'arm64'))}}
        run: |
          sudo bash packaging_scripts/indexer_node_install.sh ${{ inputs.previous_version }}
          sudo systemctl stop wazuh-indexer
          sudo dpkg -i "artifacts/dist/${{ steps.package.outputs.name }}"
          
          sudo apt-get remove --purge wazuh-indexer -y
          sudo rm -r /var/lib/wazuh-indexer/
  
      - name: Test DEB package update without stopping the indexer
        if: ${{ matrix.distribution == 'deb' && (matrix.architecture == 'x64' || (inputs.previous_version  >= '4.12' && matrix.architecture  == 'arm64'))}}
        run: |
          
          sudo bash packaging_scripts/indexer_node_install.sh ${{ inputs.previous_version }}
          sudo dpkg -i "artifacts/dist/${{ steps.package.outputs.name }}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.name }}
          path: artifacts/dist/${{ steps.package.outputs.name }}
          if-no-files-found: error

      - name: Set up AWS CLI
        if: ${{ inputs.upload }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.CI_INTERNAL_DEVELOPMENT_BUCKET_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CI_INTERNAL_DEVELOPMENT_BUCKET_USER_SECRET_KEY }}
          aws-region: ${{ secrets.CI_AWS_REGION }}

      - name: Upload package to S3
        if: ${{ inputs.upload }}
        run: |
          src="artifacts/dist/${{ steps.package.outputs.name }}"
          dest="s3://packages-dev.internal.wazuh.com/development/wazuh/4.x/main/packages/"
          aws s3 cp "$src" "$dest"
          s3uri="${dest}${{ steps.package.outputs.name }}"
          echo "S3 URI: ${s3uri}"

      - name: Upload checksum to S3
        if: ${{ inputs.upload && inputs.checksum }}
        run: |
          src="artifacts/dist/${{ steps.package.outputs.name }}.sha512"
          dest="s3://packages-dev.internal.wazuh.com/development/wazuh/4.x/main/packages/"
          aws s3 cp "$src" "$dest"
          s3uri="${dest}${{ steps.package.outputs.name }}.sha512"
          echo "S3 sha512 URI: ${s3uri}"
      
      - name: On failure delete Allocator Machine
        if: ${{ matrix.distribution == 'rpm' && failure() }} 
        run: |
          cd wazuh-automation/deployability
          python3 modules/allocation/main.py --action delete --track-output /tmp/track.yaml